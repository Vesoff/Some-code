Импортируем необходимые модели:
from news.models import User
from news.models import Author
from news.models import Category
from news.models import Post
from news.models import Comment
1. Создать двух пользователей:
user1 = User.objects.create_user('User1')
user2 = User.objects.create_user('User2')
2. Создать два объекта модели Author, связанные с пользователями:
author1 = Author.objects.create(user = user1) 
author2 = Author.objects.create(user = user2)
author1 = Author.objects.get(id=1) 
author2 = Author.objects.get(id=2)
3. Добавить 4 категории в модель Category:
category1 = Category.objects.create(name='IT')
category2 = Category.objects.create(name='Cars')
category3 = Category.objects.create(name='Economy') 
category4 = Category.objects.create(name='Sport')
category1 = Category.objects.get(id=1)
category2 = Category.objects.get(id=2)
category3 = Category.objects.get(id=3) 
category4 = Category.objects.get(id=4)
4. Добавить 2 статьи и 1 новость:
article1 = Post.objects.create(autor=author1, post_type='AR', title='Article1_title', text='Article_text1') 
article2 = Post.objects.create(autor=author2, post_type='AR', title='Article2_title', text='Article2_text')
news1 = Post.objects.create(autor=author2, post_type='NW', title='News1_title', text='News1_text')
article1 = Post.objects.get(id=1)
article2 = Post.objects.get(id=2)
news1 = Post.objects.get(id=3)
5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):
article1.category.add(category3) 
article1.category.add(category2) 
article2.category.add(category1)
article2.category.add(category4)
news1.category.add(category1)
news1.category.add(category3)
6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):
comment1 = Comment.objects.create(post=article1, user=user1, text='Comment1') 
comment2 = Comment.objects.create(post=article2, user=user2, text='Comment2') 
comment3 = Comment.objects.create(post=article1, user=user1, text='Comment3') 
comment4 = Comment.objects.create(post=news1, user=user2, text='Comment4')
comment1 = Comment.objects.get(id=1)
comment2 = Comment.objects.get(id=2)
comment3 = Comment.objects.get(id=3)
comment4 = Comment.objects.get(id=4)
7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:
comment4.like() 
comment4.dislike() 
comment3.like() 
comment3.like()  
comment3.like() 
comment1.dislike() 
comment2.like() 
comment3.like() 
comment1.dislike() 
comment2.like() 
comment3.like()
comment2.dislike() 
comment1.dislike() 
article1.like() 
article1.dislike() 
article1.like() 
article1.dislike() 
article1.like() 
article1.dislike()
article2.like() 
article2.dislike() 
article2.dislike()
news1.like()
news1.dislike()
8. Обновить рейтинги пользователей:
author1.update_rating() 
author2.update_rating()
9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):
top = Autor.objects.all().order_by('-rating').values('user__username', 'rating')[0]
print(top)
10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:
Post.objects.all().order_by('-rating').values('time_in', 'author__user__username', 'rating', 'title', 'text')[0] 
11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:
Comment.objects.all().order_by().values('time_in', 'user__username', 'rating', 'text')[0]